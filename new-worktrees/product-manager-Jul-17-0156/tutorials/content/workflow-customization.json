{
  "metadata": {
    "tutorial_id": "workflow-customization",
    "title": "Workflow Customization and Automation",
    "description": "Master the art of creating custom workflows, automating complex processes, and integrating with external systems.",
    "difficulty": "intermediate",
    "estimated_time": 50,
    "prerequisites": ["Agent Creation tutorial", "Understanding of workflow patterns", "API integration experience"],
    "learning_objectives": [
      "Design complex multi-step workflows",
      "Implement conditional logic and branching",
      "Integrate with external APIs and services",
      "Create reusable workflow templates"
    ],
    "tags": ["workflows", "automation", "integration", "templates"],
    "version": "1.0",
    "author": "LeanVibe Team"
  },
  "steps": [
    {
      "step_id": "workflow-design",
      "title": "Workflow Design Patterns",
      "description": "Learn to design efficient workflows using proven patterns and best practices.",
      "instructions": [
        "Identify workflow requirements and constraints",
        "Choose appropriate workflow patterns",
        "Design task dependencies and sequencing",
        "Plan error handling and recovery strategies"
      ],
      "code_examples": [
        "from enum import Enum\nfrom typing import List, Dict, Any, Optional\nfrom dataclasses import dataclass\nimport asyncio\n\nclass WorkflowStatus(Enum):\n    PENDING = \"pending\"\n    RUNNING = \"running\"\n    COMPLETED = \"completed\"\n    FAILED = \"failed\"\n    PAUSED = \"paused\"\n\n@dataclass\nclass WorkflowStep:\n    step_id: str\n    name: str\n    agent_type: str\n    inputs: Dict[str, Any]\n    outputs: Dict[str, Any]\n    dependencies: List[str]\n    timeout: int = 300  # seconds\n    retry_count: int = 3\n\nclass Workflow:\n    def __init__(self, workflow_id: str, steps: List[WorkflowStep]):\n        self.workflow_id = workflow_id\n        self.steps = {step.step_id: step for step in steps}\n        self.status = WorkflowStatus.PENDING\n        self.current_step = None\n        self.completed_steps = set()\n        self.failed_steps = set()\n        self.step_results = {}\n    \n    def get_ready_steps(self) -> List[WorkflowStep]:\n        \"\"\"Get steps that are ready to execute.\"\"\"\n        ready_steps = []\n        for step in self.steps.values():\n            if (step.step_id not in self.completed_steps and \n                step.step_id not in self.failed_steps and\n                all(dep in self.completed_steps for dep in step.dependencies)):\n                ready_steps.append(step)\n        return ready_steps\n    \n    def is_complete(self) -> bool:\n        \"\"\"Check if workflow is complete.\"\"\"\n        return len(self.completed_steps) == len(self.steps)\n    \n    def has_failed(self) -> bool:\n        \"\"\"Check if workflow has failed.\"\"\"\n        return len(self.failed_steps) > 0\n\n# Example workflow definition\nsteps = [\n    WorkflowStep(\"data_fetch\", \"Fetch Data\", \"data_agent\", {\"source\": \"api\"}, {\"data\": None}, []),\n    WorkflowStep(\"data_process\", \"Process Data\", \"processing_agent\", {\"data\": \"{{data_fetch.data}}\"}, {\"processed_data\": None}, [\"data_fetch\"]),\n    WorkflowStep(\"data_store\", \"Store Data\", \"storage_agent\", {\"data\": \"{{data_process.processed_data}}\"}, {\"stored\": None}, [\"data_process\"])\n]\n\nworkflow = Workflow(\"data_pipeline\", steps)\nprint(f\"Workflow created: {workflow.workflow_id}\")\nprint(f\"Total steps: {len(workflow.steps)}\")\nprint(f\"Ready steps: {len(workflow.get_ready_steps())}\")"
      ],
      "validation_command": "python -c \"print('Workflow design validation passed')\"",
      "expected_output": "Workflow design validation passed",
      "hints": [
        "Use dependency graphs to visualize workflow structure",
        "Consider parallel execution for independent steps",
        "Plan for failure scenarios and recovery mechanisms"
      ],
      "estimated_time": 15
    },
    {
      "step_id": "workflow-execution",
      "title": "Workflow Execution Engine",
      "description": "Implement a robust workflow execution engine with error handling and monitoring.",
      "instructions": [
        "Create workflow execution engine",
        "Implement step scheduling and coordination",
        "Add progress tracking and monitoring",
        "Handle failures and implement retry logic"
      ],
      "code_examples": [
        "import asyncio\nimport logging\nfrom datetime import datetime\nfrom typing import Dict, Any\n\nclass WorkflowExecutor:\n    def __init__(self, coordinator):\n        self.coordinator = coordinator\n        self.logger = logging.getLogger('workflow_executor')\n        self.active_workflows: Dict[str, Workflow] = {}\n    \n    async def execute_workflow(self, workflow: Workflow) -> bool:\n        \"\"\"Execute a complete workflow.\"\"\"\n        try:\n            self.logger.info(f\"Starting workflow: {workflow.workflow_id}\")\n            workflow.status = WorkflowStatus.RUNNING\n            self.active_workflows[workflow.workflow_id] = workflow\n            \n            while not workflow.is_complete() and not workflow.has_failed():\n                ready_steps = workflow.get_ready_steps()\n                \n                if not ready_steps:\n                    self.logger.warning(f\"No ready steps found for workflow {workflow.workflow_id}\")\n                    break\n                \n                # Execute ready steps in parallel\n                tasks = []\n                for step in ready_steps:\n                    task = asyncio.create_task(self.execute_step(workflow, step))\n                    tasks.append(task)\n                \n                # Wait for all steps to complete\n                await asyncio.gather(*tasks, return_exceptions=True)\n            \n            if workflow.is_complete():\n                workflow.status = WorkflowStatus.COMPLETED\n                self.logger.info(f\"Workflow {workflow.workflow_id} completed successfully\")\n                return True\n            else:\n                workflow.status = WorkflowStatus.FAILED\n                self.logger.error(f\"Workflow {workflow.workflow_id} failed\")\n                return False\n                \n        except Exception as e:\n            self.logger.error(f\"Workflow execution error: {e}\")\n            workflow.status = WorkflowStatus.FAILED\n            return False\n        finally:\n            self.active_workflows.pop(workflow.workflow_id, None)\n    \n    async def execute_step(self, workflow: Workflow, step: WorkflowStep) -> bool:\n        \"\"\"Execute a single workflow step.\"\"\"\n        try:\n            self.logger.info(f\"Executing step: {step.step_id} in workflow {workflow.workflow_id}\")\n            \n            # Resolve input variables\n            resolved_inputs = self.resolve_inputs(step.inputs, workflow.step_results)\n            \n            # Create task for agent\n            task = {\n                'id': f\"{workflow.workflow_id}-{step.step_id}\",\n                'type': step.agent_type,\n                'inputs': resolved_inputs,\n                'timeout': step.timeout\n            }\n            \n            # Execute task with retry logic\n            for attempt in range(step.retry_count):\n                try:\n                    result = await self.execute_task_with_agent(task, step.agent_type)\n                    \n                    # Store results\n                    workflow.step_results[step.step_id] = result\n                    workflow.completed_steps.add(step.step_id)\n                    \n                    self.logger.info(f\"Step {step.step_id} completed successfully\")\n                    return True\n                    \n                except Exception as e:\n                    self.logger.warning(f\"Step {step.step_id} attempt {attempt + 1} failed: {e}\")\n                    if attempt == step.retry_count - 1:\n                        raise\n                    await asyncio.sleep(2 ** attempt)  # Exponential backoff\n            \n        except Exception as e:\n            self.logger.error(f\"Step {step.step_id} failed after all retries: {e}\")\n            workflow.failed_steps.add(step.step_id)\n            return False\n    \n    def resolve_inputs(self, inputs: Dict[str, Any], results: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Resolve input variables from previous step results.\"\"\"\n        resolved = {}\n        for key, value in inputs.items():\n            if isinstance(value, str) and value.startswith('{{') and value.endswith('}}'):\n                # Extract variable reference\n                var_ref = value[2:-2]\n                if '.' in var_ref:\n                    step_id, output_key = var_ref.split('.', 1)\n                    if step_id in results:\n                        resolved[key] = results[step_id].get(output_key)\n                    else:\n                        resolved[key] = None\n                else:\n                    resolved[key] = results.get(var_ref)\n            else:\n                resolved[key] = value\n        return resolved\n    \n    async def execute_task_with_agent(self, task: Dict[str, Any], agent_type: str) -> Dict[str, Any]:\n        \"\"\"Execute task with appropriate agent.\"\"\"\n        # This would integrate with the actual agent system\n        # For now, simulate task execution\n        await asyncio.sleep(0.1)\n        return {\n            'status': 'completed',\n            'output': f\"Task {task['id']} completed by {agent_type}\",\n            'timestamp': datetime.now().isoformat()\n        }\n\n# Example usage\nprint(\"Workflow executor implementation complete!\")\nprint(\"Ready to execute complex workflows with error handling and retry logic.\")"
      ],
      "validation_command": "python -c \"print('Workflow execution validation passed')\"",
      "expected_output": "Workflow execution validation passed",
      "hints": [
        "Implement proper logging for debugging workflow issues",
        "Use exponential backoff for retry logic",
        "Monitor workflow execution time and resource usage"
      ],
      "estimated_time": 25
    },
    {
      "step_id": "external-integration",
      "title": "External API Integration",
      "description": "Integrate workflows with external APIs and services for comprehensive automation.",
      "instructions": [
        "Design API integration patterns",
        "Implement authentication and error handling",
        "Create reusable API client components",
        "Test integration with real external services"
      ],
      "code_examples": [
        "import aiohttp\nimport asyncio\nfrom typing import Dict, Any, Optional\nimport json\n\nclass APIClient:\n    def __init__(self, base_url: str, auth_token: Optional[str] = None):\n        self.base_url = base_url\n        self.auth_token = auth_token\n        self.session = None\n    \n    async def __aenter__(self):\n        headers = {}\n        if self.auth_token:\n            headers['Authorization'] = f'Bearer {self.auth_token}'\n        \n        self.session = aiohttp.ClientSession(\n            base_url=self.base_url,\n            headers=headers,\n            timeout=aiohttp.ClientTimeout(total=30)\n        )\n        return self\n    \n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        if self.session:\n            await self.session.close()\n    \n    async def get(self, endpoint: str, params: Optional[Dict] = None) -> Dict[str, Any]:\n        \"\"\"Make GET request to API.\"\"\"\n        async with self.session.get(endpoint, params=params) as response:\n            response.raise_for_status()\n            return await response.json()\n    \n    async def post(self, endpoint: str, data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Make POST request to API.\"\"\"\n        async with self.session.post(endpoint, json=data) as response:\n            response.raise_for_status()\n            return await response.json()\n\nclass ExternalServiceAgent:\n    \"\"\"Agent that integrates with external services.\"\"\"\n    \n    def __init__(self, agent_id: str, api_config: Dict[str, Any]):\n        self.agent_id = agent_id\n        self.api_config = api_config\n        self.status = 'ready'\n    \n    async def process_task(self, task: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Process task using external API.\"\"\"\n        try:\n            task_type = task.get('type', 'unknown')\n            \n            if task_type == 'data_fetch':\n                return await self.fetch_data(task.get('inputs', {}))\n            elif task_type == 'data_push':\n                return await self.push_data(task.get('inputs', {}))\n            else:\n                raise ValueError(f\"Unknown task type: {task_type}\")\n        \n        except Exception as e:\n            return {\n                'status': 'failed',\n                'error': str(e),\n                'agent_id': self.agent_id\n            }\n    \n    async def fetch_data(self, inputs: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Fetch data from external API.\"\"\"\n        async with APIClient(self.api_config['base_url'], self.api_config.get('token')) as client:\n            endpoint = inputs.get('endpoint', '/data')\n            params = inputs.get('params', {})\n            \n            data = await client.get(endpoint, params)\n            \n            return {\n                'status': 'completed',\n                'data': data,\n                'agent_id': self.agent_id,\n                'timestamp': datetime.now().isoformat()\n            }\n    \n    async def push_data(self, inputs: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Push data to external API.\"\"\"\n        async with APIClient(self.api_config['base_url'], self.api_config.get('token')) as client:\n            endpoint = inputs.get('endpoint', '/data')\n            data = inputs.get('data', {})\n            \n            result = await client.post(endpoint, data)\n            \n            return {\n                'status': 'completed',\n                'result': result,\n                'agent_id': self.agent_id,\n                'timestamp': datetime.now().isoformat()\n            }\n    \n    async def health_check(self) -> bool:\n        \"\"\"Check agent and external service health.\"\"\"\n        try:\n            async with APIClient(self.api_config['base_url'], self.api_config.get('token')) as client:\n                await client.get('/health')\n                return True\n        except Exception:\n            return False\n\n# Example integration setup\napi_config = {\n    'base_url': 'https://api.example.com',\n    'token': 'your-api-token-here'\n}\n\nagent = ExternalServiceAgent('external-agent-1', api_config)\nprint(f\"External service agent {agent.agent_id} created\")\nprint(\"Ready to integrate with external APIs!\")"
      ],
      "validation_command": "python -c \"print('External integration validation passed')\"",
      "expected_output": "External integration validation passed",
      "hints": [
        "Always implement proper timeout and retry mechanisms for external calls",
        "Use connection pooling for better performance",
        "Monitor external service health and implement circuit breakers"
      ],
      "estimated_time": 10
    }
  ]
}