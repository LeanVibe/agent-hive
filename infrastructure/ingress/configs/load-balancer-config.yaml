apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-load-balancer-config
  namespace: leanvibe-agent-hive
  labels:
    app.kubernetes.io/name: nginx-load-balancer
    app.kubernetes.io/component: config
data:
  nginx.conf: |
    # LeanVibe Agent Hive Load Balancer Configuration
    # Optimized for high availability and performance
    
    user nginx;
    worker_processes auto;
    worker_rlimit_nofile 65535;
    
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 4096;
        use epoll;
        multi_accept on;
        accept_mutex off;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging format for load balancer
        log_format lb_format '$remote_addr - $remote_user [$time_local] "$request" '
                           '$status $body_bytes_sent "$http_referer" '
                           '"$http_user_agent" "$http_x_forwarded_for" '
                           'rt=$request_time uct="$upstream_connect_time" '
                           'uht="$upstream_header_time" urt="$upstream_response_time" '
                           'upstream="$upstream_addr" cache="$upstream_cache_status"';
        
        access_log /var/log/nginx/access.log lb_format;
        
        # Performance optimizations
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        keepalive_requests 1000;
        types_hash_max_size 2048;
        client_max_body_size 64m;
        client_body_timeout 60s;
        client_header_timeout 60s;
        
        # Compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        
        # Rate limiting zones
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=webhook:10m rate=5r/s;
        limit_req_zone $binary_remote_addr zone=auth:10m rate=2r/s;
        
        # Connection limiting
        limit_conn_zone $binary_remote_addr zone=perip:10m;
        
        # Upstream configurations with health checks
        upstream agent_hive_api {
            least_conn;
            
            # Primary replicas
            server agent-hive-service:8000 max_fails=3 fail_timeout=30s weight=10;
            server agent-hive-service:8000 max_fails=3 fail_timeout=30s weight=10;
            server agent-hive-service:8000 max_fails=3 fail_timeout=30s weight=10;
            
            # Backup server (lower weight)
            server agent-hive-service:8000 max_fails=3 fail_timeout=30s weight=5 backup;
            
            keepalive 32;
            keepalive_requests 100;
            keepalive_timeout 60s;
        }
        
        upstream agent_hive_webhook {
            ip_hash;  # Session affinity for webhooks
            
            server agent-hive-service:8080 max_fails=3 fail_timeout=30s;
            server agent-hive-service:8080 max_fails=3 fail_timeout=30s;
            
            keepalive 16;
        }
        
        upstream agent_hive_gateway {
            least_conn;
            
            server agent-hive-service:8081 max_fails=3 fail_timeout=30s;
            server agent-hive-service:8081 max_fails=3 fail_timeout=30s;
            server agent-hive-service:8081 max_fails=3 fail_timeout=30s;
            
            keepalive 32;
        }
        
        # Security headers map
        map $sent_http_content_type $security_headers {
            default "X-Frame-Options: DENY";
            ~text/html "X-Frame-Options: DENY; X-Content-Type-Options: nosniff; X-XSS-Protection: 1; mode=block";
        }
        
        # Health check endpoint
        server {
            listen 8080;
            server_name _;
            access_log off;
            
            location /health {
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            location /nginx_status {
                stub_status on;
                allow 10.0.0.0/8;
                allow 172.16.0.0/12;
                allow 192.168.0.0/16;
                deny all;
            }
        }
        
        # Main load balancer server
        server {
            listen 80 default_server;
            server_name _;
            
            # Security headers
            add_header $security_headers always;
            add_header Referrer-Policy strict-origin-when-cross-origin always;
            
            # Connection limits
            limit_conn perip 20;
            
            # Main API endpoints
            location / {
                limit_req zone=api burst=20 nodelay;
                
                proxy_pass http://agent_hive_api;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
                
                # Timeouts
                proxy_connect_timeout 5s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
                
                # Retry logic
                proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
                proxy_next_upstream_tries 3;
                proxy_next_upstream_timeout 10s;
            }
            
            # Webhook endpoints
            location /webhook {
                limit_req zone=webhook burst=10 nodelay;
                
                proxy_pass http://agent_hive_webhook;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Webhook-specific timeouts
                proxy_connect_timeout 5s;
                proxy_send_timeout 120s;
                proxy_read_timeout 120s;
                
                # Disable buffering for real-time webhooks
                proxy_buffering off;
                proxy_request_buffering off;
            }
            
            # API Gateway endpoints
            location /api/ {
                limit_req zone=api burst=30 nodelay;
                
                proxy_pass http://agent_hive_gateway/;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # API Gateway timeouts
                proxy_connect_timeout 5s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
            }
            
            # Health check (no rate limiting)
            location /health {
                access_log off;
                proxy_pass http://agent_hive_api/health;
                proxy_set_header Host $host;
                
                # Health check timeout
                proxy_connect_timeout 3s;
                proxy_send_timeout 10s;
                proxy_read_timeout 10s;
            }
            
            # Metrics endpoint (restricted access)
            location /metrics {
                limit_req zone=api burst=5 nodelay;
                
                # Allow only internal networks
                allow 10.0.0.0/8;
                allow 172.16.0.0/12;
                allow 192.168.0.0/16;
                deny all;
                
                proxy_pass http://agent_hive_api/metrics;
                proxy_set_header Host $host;
            }
            
            # Static assets (if any)
            location /static/ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Vary Accept-Encoding;
                
                # Serve from local volume or proxy to backend
                try_files $uri @backend;
            }
            
            location @backend {
                proxy_pass http://agent_hive_api;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # Security: Block common attack patterns
            location ~ /\. {
                deny all;
                access_log off;
                log_not_found off;
            }
            
            location ~ \.(aspx?|php|jsp|cgi)$ {
                deny all;
                access_log off;
                log_not_found off;
            }
            
            # Custom error pages
            error_page 404 /custom_404.html;
            error_page 500 502 503 504 /custom_50x.html;
            
            location = /custom_404.html {
                internal;
                return 404 '{"error": "Not Found", "message": "The requested resource was not found"}';
                add_header Content-Type application/json;
            }
            
            location = /custom_50x.html {
                internal;
                return 500 '{"error": "Internal Server Error", "message": "The server encountered an error"}';
                add_header Content-Type application/json;
            }
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-load-balancer
  namespace: leanvibe-agent-hive
  labels:
    app.kubernetes.io/name: nginx-load-balancer
    app.kubernetes.io/component: load-balancer
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-load-balancer
      app.kubernetes.io/component: load-balancer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-load-balancer
        app.kubernetes.io/component: load-balancer
    spec:
      containers:
      - name: nginx
        image: nginx:1.25-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        - name: health
          containerPort: 8080
          protocol: TCP
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: health
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: health
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-logs
          mountPath: /var/log/nginx
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-load-balancer-config
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - nginx-load-balancer
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-load-balancer-service
  namespace: leanvibe-agent-hive
  labels:
    app.kubernetes.io/name: nginx-load-balancer
    app.kubernetes.io/component: load-balancer
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: health
    port: 8080
    targetPort: health
    protocol: TCP
  selector:
    app.kubernetes.io/name: nginx-load-balancer
    app.kubernetes.io/component: load-balancer