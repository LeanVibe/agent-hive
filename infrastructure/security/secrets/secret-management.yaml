apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-operator
  namespace: leanvibe-agent-hive
  labels:
    app.kubernetes.io/name: external-secrets
    app.kubernetes.io/component: controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-operator
  labels:
    app.kubernetes.io/name: external-secrets
    app.kubernetes.io/component: controller
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "delete", "deletecollection", "get", "list", "patch", "update", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create", "delete", "deletecollection", "get", "list", "patch", "update", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-operator
  labels:
    app.kubernetes.io/name: external-secrets
    app.kubernetes.io/component: controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-operator
subjects:
- kind: ServiceAccount
  name: external-secrets-operator
  namespace: leanvibe-agent-hive
---
apiVersion: v1
kind: Secret
metadata:
  name: agent-hive-secrets-template
  namespace: leanvibe-agent-hive
  labels:
    app.kubernetes.io/name: leanvibe-agent-hive
    app.kubernetes.io/component: secrets
  annotations:
    # Template for production secrets - replace with actual values
    kubernetes.io/description: "Template for Agent Hive secrets - DO NOT use in production"
type: Opaque
stringData:
  # Database credentials
  postgres-username: "agent_hive_app"
  postgres-password: "REPLACE_WITH_SECURE_PASSWORD"
  postgres-root-password: "REPLACE_WITH_SECURE_ROOT_PASSWORD"
  
  # Redis credentials
  redis-password: "REPLACE_WITH_SECURE_REDIS_PASSWORD"
  
  # JWT secrets
  jwt-secret: "REPLACE_WITH_SECURE_JWT_SECRET_32_CHARS_MIN"
  jwt-refresh-secret: "REPLACE_WITH_SECURE_JWT_REFRESH_SECRET"
  
  # API keys
  api-secret-key: "REPLACE_WITH_SECURE_API_SECRET_KEY"
  webhook-secret: "REPLACE_WITH_SECURE_WEBHOOK_SECRET"
  
  # External service credentials
  cloudflare-api-token: "REPLACE_WITH_CLOUDFLARE_API_TOKEN"
  monitoring-password: "REPLACE_WITH_MONITORING_PASSWORD"
  
  # Encryption keys
  encryption-key: "REPLACE_WITH_32_BYTE_ENCRYPTION_KEY"
  
  # TLS certificates (if using external CA)
  tls-cert: ""
  tls-key: ""
  ca-cert: ""
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin-credentials
  namespace: leanvibe-agent-hive
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: secrets
type: Opaque
stringData:
  admin-user: "admin"
  admin-password: "REPLACE_WITH_SECURE_GRAFANA_PASSWORD"
---
apiVersion: v1
kind: Secret
metadata:
  name: prometheus-basic-auth
  namespace: leanvibe-agent-hive
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: secrets
type: Opaque
stringData:
  username: "prometheus"
  password: "REPLACE_WITH_SECURE_PROMETHEUS_PASSWORD"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-management-policy
  namespace: leanvibe-agent-hive
  labels:
    app.kubernetes.io/name: leanvibe-agent-hive
    app.kubernetes.io/component: security
data:
  secret-rotation-policy.md: |
    # Secret Rotation Policy
    
    ## Rotation Schedule
    - **Database passwords**: Every 90 days
    - **JWT secrets**: Every 30 days
    - **API keys**: Every 60 days
    - **TLS certificates**: Automatically managed by cert-manager
    - **Service account tokens**: Every 90 days
    
    ## Emergency Rotation
    - Immediate rotation required if secret is compromised
    - Use emergency rotation procedures in runbook
    
    ## Validation
    - All secrets must be validated after rotation
    - Health checks must pass before completing rotation
    
    ## Backup
    - Previous secrets kept for 24 hours for rollback
    - Encrypted backup of critical secrets in secure storage
  
  secret-requirements.md: |
    # Secret Requirements
    
    ## Password Requirements
    - Minimum 16 characters
    - Include uppercase, lowercase, numbers, and special characters
    - No dictionary words or common patterns
    - No reuse of previous 5 passwords
    
    ## Key Requirements
    - JWT secrets: minimum 32 characters
    - Encryption keys: 32 bytes (256-bit)
    - API keys: minimum 24 characters
    
    ## Storage Requirements
    - All secrets stored in Kubernetes secrets
    - Encryption at rest enabled
    - Access logged and monitored
    - Principle of least privilege access
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-rotation-check
  namespace: leanvibe-agent-hive
  labels:
    app.kubernetes.io/name: leanvibe-agent-hive
    app.kubernetes.io/component: security
spec:
  schedule: "0 2 * * 0"  # Weekly on Sunday at 2 AM
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: secret-rotation-check
            app.kubernetes.io/component: security
        spec:
          serviceAccountName: external-secrets-operator
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            fsGroup: 65534
          containers:
          - name: secret-checker
            image: bitnami/kubectl:latest
            imagePullPolicy: IfNotPresent
            command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "Checking secret rotation requirements..."
              
              # Check secret ages
              secrets=$(kubectl get secrets -n leanvibe-agent-hive -o json)
              
              # Check if secrets are older than rotation policy
              current_time=$(date +%s)
              rotation_needed=false
              
              for secret in agent-hive-secrets grafana-admin-credentials prometheus-basic-auth; do
                creation_time=$(kubectl get secret $secret -n leanvibe-agent-hive -o jsonpath='{.metadata.creationTimestamp}' | xargs -I {} date -d {} +%s)
                age_days=$(( (current_time - creation_time) / 86400 ))
                
                echo "Secret $secret age: $age_days days"
                
                if [ $age_days -gt 90 ]; then
                  echo "WARNING: Secret $secret is older than 90 days and needs rotation"
                  rotation_needed=true
                fi
              done
              
              if [ "$rotation_needed" = true ]; then
                echo "ALERT: Some secrets require rotation"
                # In production, this would trigger alerts/notifications
                exit 1
              else
                echo "All secrets are within rotation policy"
              fi
            resources:
              requests:
                memory: "64Mi"
                cpu: "50m"
              limits:
                memory: "128Mi"
                cpu: "100m"
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 65534
              capabilities:
                drop:
                - ALL