# LeanVibe Agent Hive Docker Compose Configuration
# Production-ready orchestration with monitoring, security, and scaling

version: '3.8'

services:
  # Main application service
  agent-hive:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: leanvibe-agent-hive
    restart: unless-stopped
    ports:
      - "8000:8000"    # Main API
      - "8080:8080"    # Webhook server
      - "8081:8081"    # API Gateway
    environment:
      - LEANVIBE_ENVIRONMENT=production
      - LEANVIBE_LOG_LEVEL=INFO
      - LEANVIBE_REDIS_URL=redis://redis:6379
      - LEANVIBE_POSTGRES_URL=postgresql://postgres:password@postgres:5432/agent_hive
      - LEANVIBE_PROMETHEUS_ENDPOINT=http://prometheus:9090
      - LEANVIBE_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    volumes:
      - agent-hive-data:/app/data
      - agent-hive-logs:/app/logs
      - agent-hive-config:/app/config
    depends_on:
      - redis
      - postgres
      - prometheus
      - jaeger
    networks:
      - agent-hive-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: leanvibe-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - agent-hive-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PostgreSQL for persistent data
  postgres:
    image: postgres:16-alpine
    container_name: leanvibe-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=agent_hive
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - agent-hive-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: leanvibe-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - agent-hive-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: leanvibe-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - agent-hive-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: leanvibe-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger-data:/tmp
    networks:
      - agent-hive-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NGINX Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: leanvibe-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
      - nginx-logs:/var/log/nginx
    depends_on:
      - agent-hive
    networks:
      - agent-hive-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

# Named volumes for persistent data
volumes:
  agent-hive-data:
    driver: local
  agent-hive-logs:
    driver: local
  agent-hive-config:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  jaeger-data:
    driver: local
  nginx-logs:
    driver: local

# Custom network for service communication
networks:
  agent-hive-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16