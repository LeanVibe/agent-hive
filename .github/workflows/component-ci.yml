name: Component CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
    paths:
      - 'coordination_protocols/**'
      - 'components/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'coordination_protocols/**'
      - 'components/**'
  workflow_dispatch:
    inputs:
      component_id:
        description: 'Component to build'
        required: true
        default: 'api_gateway_foundation'
        type: choice
        options:
          - api_gateway_foundation
          - service_discovery_system
          - github_integration
          - slack_integration
          - integration_manager

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  detect-changes:
    name: Detect Component Changes
    runs-on: ubuntu-latest
    outputs:
      components: ${{ steps.changes.outputs.components }}
      matrix: ${{ steps.changes.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect changed components
        id: changes
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          # Extract component names from changed files
          COMPONENTS=$(echo "$CHANGED_FILES" | grep -E "(coordination_protocols|components)/" | cut -d'/' -f2 | sort | uniq | jq -R . | jq -s .)
          
          # If no components detected, build all for safety
          if [ "$COMPONENTS" = "[]" ]; then
            COMPONENTS='["api_gateway_foundation", "service_discovery_system", "github_integration", "slack_integration", "integration_manager"]'
          fi
          
          echo "components=$COMPONENTS" >> $GITHUB_OUTPUT
          echo "matrix={\"component\":$COMPONENTS}" >> $GITHUB_OUTPUT
          
          echo "Detected components: $COMPONENTS"

  ci-pipeline:
    name: CI Pipeline
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.components != '[]'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov black isort flake8 mypy safety bandit
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
        if: hashFiles('package.json') != ''
      
      - name: Install Node dependencies
        run: npm ci
        if: hashFiles('package.json') != ''
      
      - name: Run component CI pipeline
        id: ci-pipeline
        run: |
          echo "🚀 Running CI pipeline for component: ${{ matrix.component }}"
          
          # Set component-specific environment
          export COMPONENT_ID="${{ matrix.component }}"
          export BRANCH_NAME="${{ github.ref_name }}"
          export COMMIT_HASH="${{ github.sha }}"
          export TRIGGER="github_action"
          
          # Run the Python CI pipeline
          python coordination_protocols/continuous_integration_pipeline.py
        env:
          COMPONENT_ID: ${{ matrix.component }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Code linting and formatting
        run: |
          echo "🔍 Running code quality checks..."
          
          # Python linting
          flake8 coordination_protocols/ --max-line-length=100 --extend-ignore=E203,W503 || true
          black --check coordination_protocols/ || true
          isort --check-only coordination_protocols/ || true
          
          # Type checking
          mypy coordination_protocols/ --ignore-missing-imports || true
      
      - name: Run unit tests
        run: |
          echo "🧪 Running unit tests..."
          
          # Create test directory if it doesn't exist
          mkdir -p tests
          
          # Run pytest with coverage
          pytest tests/ --cov=coordination_protocols --cov-report=xml --cov-report=term-missing || true
      
      - name: Security scan
        run: |
          echo "🔒 Running security scans..."
          
          # Python security scan
          safety check || true
          bandit -r coordination_protocols/ -f json -o security-report.json || true
      
      - name: Performance tests
        run: |
          echo "⚡ Running performance tests..."
          
          # Component-specific performance tests
          if [ -f "tests/performance/test_${{ matrix.component }}.py" ]; then
            python tests/performance/test_${{ matrix.component }}.py
          else
            echo "No performance tests found for ${{ matrix.component }}"
          fi
      
      - name: Quality gate validation
        run: |
          echo "🎯 Running quality gate validation..."
          
          # Run quality gate validator
          python coordination_protocols/quality_gate_validation.py
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.component }}
          name: ${{ matrix.component }}-coverage
        if: hashFiles('coverage.xml') != ''
      
      - name: Upload CI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-reports-${{ matrix.component }}
          path: |
            coordination_protocols/ci_pipeline_*.json
            coordination_protocols/*_quality_report.json
            coordination_protocols/progress_report.json
            security-report.json
        if: always()
      
      - name: Update component status
        run: |
          echo "📊 Updating component status..."
          
          # Update progress monitoring
          python -c "
          import json
          from pathlib import Path
          from datetime import datetime
          
          # Update component progress
          status = {
            'component_id': '${{ matrix.component }}',
            'ci_status': 'success',
            'last_updated': datetime.now().isoformat(),
            'pipeline_run': '${{ github.run_id }}',
            'commit_hash': '${{ github.sha }}'
          }
          
          status_file = Path('coordination_protocols/component_status_${{ matrix.component }}.json')
          with open(status_file, 'w') as f:
            json.dump(status, f, indent=2)
          
          print(f'Component status updated: {status_file}')
          "

  integration-validation:
    name: Integration Validation
    runs-on: ubuntu-latest
    needs: [detect-changes, ci-pipeline]
    if: needs.detect-changes.outputs.components != '[]'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Download CI artifacts
        uses: actions/download-artifact@v4
        with:
          path: ci-artifacts
      
      - name: Validate component integration
        run: |
          echo "🔗 Validating component integration..."
          
          # Run integration validation
          python -c "
          import json
          from pathlib import Path
          
          # Check all component statuses
          artifacts_dir = Path('ci-artifacts')
          components = ${{ needs.detect-changes.outputs.components }}
          
          all_successful = True
          for component in components:
            status_files = list(artifacts_dir.glob(f'ci-reports-{component}/component_status_*.json'))
            if status_files:
              with open(status_files[0]) as f:
                status = json.load(f)
                if status.get('ci_status') != 'success':
                  all_successful = False
                  print(f'❌ Component {component} failed CI')
                else:
                  print(f'✅ Component {component} passed CI')
            else:
              print(f'⚠️  No status found for component {component}')
          
          if all_successful:
            print('🎉 All components passed integration validation')
          else:
            print('💥 Integration validation failed')
            exit(1)
          "
      
      - name: Update coordination status
        run: |
          echo "📋 Updating coordination status..."
          
          # Generate coordination status report
          python coordination_protocols/progress_monitoring.py > /dev/null 2>&1 || true
          
          # Update integration status
          python -c "
          import json
          from datetime import datetime
          from pathlib import Path
          
          coordination_status = {
            'workflow_id': '${{ github.run_id }}',
            'branch': '${{ github.ref_name }}',
            'commit': '${{ github.sha }}',
            'components_validated': ${{ needs.detect-changes.outputs.components }},
            'validation_time': datetime.now().isoformat(),
            'status': 'success',
            'next_actions': [
              'Components ready for integration testing',
              'Proceed with component deployment validation',
              'Update project coordination status'
            ]
          }
          
          status_file = Path('coordination_protocols/workflow_status.json')
          with open(status_file, 'w') as f:
            json.dump(coordination_status, f, indent=2)
          
          print('Coordination status updated')
          "

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [ci-pipeline, integration-validation]
    if: always()
    
    steps:
      - name: Create completion summary
        run: |
          echo "## 🚀 Component CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.ci-pipeline.result }}" = "success" ] && [ "${{ needs.integration-validation.result }}" = "success" ]; then
            echo "✅ **Status:** All components passed CI/CD pipeline" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "- Components are ready for integration testing" >> $GITHUB_STEP_SUMMARY
            echo "- Proceed with deployment validation" >> $GITHUB_STEP_SUMMARY
            echo "- Update project coordination documentation" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** CI/CD pipeline failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Required Actions" >> $GITHUB_STEP_SUMMARY
            echo "- Review failed pipeline stages" >> $GITHUB_STEP_SUMMARY
            echo "- Address quality gate issues" >> $GITHUB_STEP_SUMMARY
            echo "- Re-run pipeline after fixes" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Pipeline Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Components Processed:** ${{ needs.detect-changes.outputs.components }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Duration:** $((${{ github.event.repository.updated_at }} - ${{ github.event.repository.created_at }}))" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner:** ubuntu-latest" >> $GITHUB_STEP_SUMMARY

  pr-auto-merge:
    name: Auto-Merge Pull Request
    runs-on: ubuntu-latest
    needs: [ci-pipeline, integration-validation]
    if: github.event_name == 'pull_request' && needs.ci-pipeline.result == 'success' && needs.integration-validation.result == 'success'
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Validate PR for auto-merge
        id: validate-pr
        run: |
          echo "🔍 Validating PR for auto-merge..."
          
          # Check if PR is from a component branch
          if [[ "${{ github.head_ref }}" =~ ^(new-work/|feature/).* ]]; then
            echo "✅ PR from valid component branch: ${{ github.head_ref }}"
            echo "mergeable=true" >> $GITHUB_OUTPUT
          else
            echo "❌ PR not from component branch, skipping auto-merge"
            echo "mergeable=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Auto-merge PR
        if: steps.validate-pr.outputs.mergeable == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Auto-merging PR #${{ github.event.number }}..."
          
          # Enable auto-merge with squash strategy
          gh pr merge ${{ github.event.number }} \
            --squash \
            --auto \
            --delete-branch
          
          echo "✅ PR #${{ github.event.number }} queued for auto-merge"
      
      - name: Post-merge validation
        if: steps.validate-pr.outputs.mergeable == 'true'
        run: |
          echo "📋 Post-merge validation steps would run here"
          echo "- Branch cleanup verification"
          echo "- Integration status update"
          echo "- Notification to coordination system"