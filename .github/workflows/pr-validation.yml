name: 🔍 LeanVibe PR Validation
on:
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master]

jobs:
  pr-size-validation:
    name: 📏 PR Size Validation
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 📊 Calculate PR size
        id: pr_size
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            BASE_SHA="${{ github.event.before }}"
            HEAD_SHA="${{ github.event.after }}"
          fi
          
          # Calculate changes
          ADDITIONS=$(git diff --numstat $BASE_SHA..$HEAD_SHA | awk '{sum += $1} END {print sum+0}')
          DELETIONS=$(git diff --numstat $BASE_SHA..$HEAD_SHA | awk '{sum += $2} END {print sum+0}')
          NET_CHANGES=$((ADDITIONS - DELETIONS))
          FILES_CHANGED=$(git diff --name-only $BASE_SHA..$HEAD_SHA | wc -l)
          
          echo "additions=$ADDITIONS" >> $GITHUB_OUTPUT
          echo "deletions=$DELETIONS" >> $GITHUB_OUTPUT
          echo "net_changes=$NET_CHANGES" >> $GITHUB_OUTPUT
          echo "files_changed=$FILES_CHANGED" >> $GITHUB_OUTPUT
          
          # Set size limits
          SIZE_LIMIT=500
          SIZE_WARNING=300
          
          if [ $NET_CHANGES -gt $SIZE_LIMIT ]; then
            echo "status=fail" >> $GITHUB_OUTPUT
            echo "message=PR too large: $NET_CHANGES lines (limit: $SIZE_LIMIT)" >> $GITHUB_OUTPUT
          elif [ $NET_CHANGES -gt $SIZE_WARNING ]; then
            echo "status=warning" >> $GITHUB_OUTPUT
            echo "message=Large PR: $NET_CHANGES lines (warning: $SIZE_WARNING)" >> $GITHUB_OUTPUT
          else
            echo "status=pass" >> $GITHUB_OUTPUT
            echo "message=PR size acceptable: $NET_CHANGES lines" >> $GITHUB_OUTPUT
          fi
      
      - name: 📝 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { status, message, additions, deletions, net_changes, files_changed } = {
              status: '${{ steps.pr_size.outputs.status }}',
              message: '${{ steps.pr_size.outputs.message }}',
              additions: '${{ steps.pr_size.outputs.additions }}',
              deletions: '${{ steps.pr_size.outputs.deletions }}',
              net_changes: '${{ steps.pr_size.outputs.net_changes }}',
              files_changed: '${{ steps.pr_size.outputs.files_changed }}'
            };
            
            const statusEmoji = {
              pass: '✅',
              warning: '⚠️',
              fail: '❌'
            };
            
            const comment = `## ${statusEmoji[status]} PR Size Validation
            
            **${message}**
            
            📊 **Change Summary:**
            - Files changed: ${files_changed}
            - Lines added: +${additions}
            - Lines removed: -${deletions}
            - Net change: ${net_changes} lines
            
            ${status === 'fail' ? 
              `🚨 **This PR exceeds the size limit and must be broken down:**
              - Consider splitting into smaller, focused PRs
              - Each PR should target a single feature or fix
              - Use \`git add -p\` for partial commits` : 
              status === 'warning' ? 
              `💡 **Consider if this PR could be split for easier review:**
              - Large PRs are harder to review thoroughly
              - Consider breaking into logical chunks` : 
              `🎉 **PR size is within acceptable limits!**`
            }
            
            ---
            *Prevention-First Approach: Automated validation to prevent workflow crises*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      - name: ❌ Fail if PR too large
        if: steps.pr_size.outputs.status == 'fail'
        run: |
          echo "::error::${{ steps.pr_size.outputs.message }}"
          echo "::error::Break this PR into smaller pieces before merging"
          exit 1

  quality-gates:
    name: 🔍 Advanced Quality Gates
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: 📦 Install quality tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 autopep8 autoflake pytest coverage
          pip install -r requirements.txt || echo "No requirements.txt found"
      
      - name: 🔍 Python syntax check
        run: |
          echo "🔍 Checking Python syntax..."
          python -m py_compile **/*.py || echo "Some files have syntax errors"
      
      - name: 🚫 CRITICAL: Prevent Code Quality Regression
        id: quality_regression
        run: |
          echo "🚫 CRITICAL QUALITY GATE: Preventing code quality regression..."
          
          # Check for critical errors that were fixed in Phase 1
          UNUSED_IMPORTS=$(python -m flake8 --select=F401 . 2>/dev/null | wc -l)
          FORMAT_ERRORS=$(python -m flake8 --select=E1,E2,E3,W2,W3 . 2>/dev/null | wc -l)
          FSTRING_ERRORS=$(python -m flake8 --select=F541 . 2>/dev/null | wc -l)
          UNUSED_VARS=$(python -m flake8 --select=F841 . 2>/dev/null | wc -l)
          
          echo "unused_imports=$UNUSED_IMPORTS" >> $GITHUB_OUTPUT
          echo "format_errors=$FORMAT_ERRORS" >> $GITHUB_OUTPUT
          echo "fstring_errors=$FSTRING_ERRORS" >> $GITHUB_OUTPUT
          echo "unused_vars=$UNUSED_VARS" >> $GITHUB_OUTPUT
          
          # Set critical thresholds (Phase 1 achieved these targets)
          CRITICAL_UNUSED_IMPORTS=10    # Was 7,651 → 0
          CRITICAL_FORMAT_ERRORS=50     # Was 1,100+ → 0
          CRITICAL_FSTRING_ERRORS=5     # Was 101 → 0
          CRITICAL_UNUSED_VARS=5        # Was 83 → 0
          
          REGRESSION_DETECTED=0
          
          if [ $UNUSED_IMPORTS -gt $CRITICAL_UNUSED_IMPORTS ]; then
            echo "::error::🚨 REGRESSION: Unused imports increased to $UNUSED_IMPORTS (threshold: $CRITICAL_UNUSED_IMPORTS)"
            REGRESSION_DETECTED=1
          fi
          
          if [ $FORMAT_ERRORS -gt $CRITICAL_FORMAT_ERRORS ]; then
            echo "::error::🚨 REGRESSION: Format errors increased to $FORMAT_ERRORS (threshold: $CRITICAL_FORMAT_ERRORS)"
            REGRESSION_DETECTED=1
          fi
          
          if [ $FSTRING_ERRORS -gt $CRITICAL_FSTRING_ERRORS ]; then
            echo "::error::🚨 REGRESSION: F-string errors increased to $FSTRING_ERRORS (threshold: $CRITICAL_FSTRING_ERRORS)"
            REGRESSION_DETECTED=1
          fi
          
          if [ $UNUSED_VARS -gt $CRITICAL_UNUSED_VARS ]; then
            echo "::error::🚨 REGRESSION: Unused variables increased to $UNUSED_VARS (threshold: $CRITICAL_UNUSED_VARS)"
            REGRESSION_DETECTED=1
          fi
          
          echo "regression_detected=$REGRESSION_DETECTED" >> $GITHUB_OUTPUT
          
          if [ $REGRESSION_DETECTED -eq 1 ]; then
            echo "status=regression" >> $GITHUB_OUTPUT
            echo "::error::🚨 CODE QUALITY REGRESSION DETECTED - PR BLOCKED"
          else
            echo "status=pass" >> $GITHUB_OUTPUT
            echo "✅ No code quality regression detected"
          fi
      
      - name: 📊 Enhanced Code Quality Metrics
        run: |
          echo "📊 Comprehensive quality analysis..."
          
          # Total error count (for tracking)
          TOTAL_ERRORS=$(python -m flake8 . 2>/dev/null | wc -l)
          echo "📊 Total linting errors: $TOTAL_ERRORS"
          
          # Line length analysis
          LINE_LENGTH_ERRORS=$(python -m flake8 --select=E501 . 2>/dev/null | wc -l)
          echo "📏 Line length violations: $LINE_LENGTH_ERRORS"
          
          # Quality score calculation (approximate)
          if [ $TOTAL_ERRORS -lt 3000 ]; then
            echo "🏆 Quality Score: EXCELLENT (9+ /10)"
          elif [ $TOTAL_ERRORS -lt 5000 ]; then
            echo "🟢 Quality Score: GOOD (7-8 /10)"
          elif [ $TOTAL_ERRORS -lt 8000 ]; then
            echo "🟡 Quality Score: FAIR (5-6 /10)"
          else
            echo "🔴 Quality Score: POOR (<5 /10)"
          fi
      
      - name: 🧪 Run comprehensive tests
        run: |
          echo "🧪 Running comprehensive test suite..."
          if [ -d "tests" ]; then
            python -m pytest tests/ -v --tb=short || echo "Tests failed or not available"
          else
            echo "No tests directory found"
          fi
      
      - name: 📊 CLI Health Check
        run: |
          echo "📊 Testing CLI health..."
          if [ -f "cli.py" ]; then
            python cli.py --help || echo "CLI help failed"
          else
            echo "No CLI found"
          fi
      
      - name: 🔍 Advanced Code Quality Check
        run: |
          echo "🔍 Advanced code quality analysis..."
          
          # Check for debug prints (warning only)
          DEBUG_PRINTS=$(grep -r "print(" **/*.py | grep -v "# debug-ok" | wc -l || echo "0")
          if [ $DEBUG_PRINTS -gt 50 ]; then
            echo "⚠️ Many debug prints found: $DEBUG_PRINTS"
          fi
          
          # Check for TODO comments (informational)
          TODO_COMMENTS=$(grep -r "TODO\|FIXME\|XXX" **/*.py | wc -l || echo "0")
          echo "📝 TODO comments found: $TODO_COMMENTS"
          
          # Check for complex functions (warning threshold)
          COMPLEX_FUNCTIONS=$(grep -r "def " **/*.py | wc -l || echo "0")
          echo "📊 Total functions: $COMPLEX_FUNCTIONS"
      
      - name: ❌ Block PR if regression detected
        if: steps.quality_regression.outputs.regression_detected == '1'
        run: |
          echo "::error::🚨 CODE QUALITY REGRESSION DETECTED"
          echo "::error::This PR introduces code quality issues that were resolved in Phase 1"
          echo "::error::Please run automated fixes before merging:"
          echo "::error::  python -m autoflake --remove-all-unused-imports --in-place --recursive ."
          echo "::error::  python -m autopep8 --in-place --recursive ."
          exit 1

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔒 Security scan
        run: |
          echo "🔒 Basic security checks..."
          # Check for potential security issues
          if grep -r "password\|secret\|token" **/*.py | grep -v "# nosec" | head -5; then
            echo "⚠️ Potential security issues found (review manually)"
          fi
          
          # Check for hardcoded credentials
          if grep -r "api_key\|private_key" **/*.py | grep -v "# nosec" | head -5; then
            echo "⚠️ Potential hardcoded credentials found"
          fi
          
          echo "✅ Basic security scan complete"

  performance-check:
    name: ⚡ Performance Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: ⚡ Performance validation
        run: |
          echo "⚡ Performance validation..."
          
          # Check for performance monitoring
          if [ -f "scripts/pm_monitor.py" ]; then
            echo "✅ PM Monitor found"
            python scripts/pm_monitor.py --status || echo "PM Monitor status check failed"
          fi
          
          # Check CLI response time
          if [ -f "cli.py" ]; then
            echo "📊 Testing CLI response time..."
            time python cli.py --help > /dev/null 2>&1 || echo "CLI timing test failed"
          fi
          
          echo "✅ Performance check complete"

  prevention-validation:
    name: 🛡️ Prevention Systems Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🛡️ Check prevention systems
        run: |
          echo "🛡️ Validating prevention systems..."
          
          # Check git hooks
          if [ -f ".githooks/pre-commit" ]; then
            echo "✅ Pre-commit hook found"
          else
            echo "⚠️ Pre-commit hook missing"
          fi
          
          if [ -f ".githooks/post-commit" ]; then
            echo "✅ Post-commit hook found"
          else
            echo "⚠️ Post-commit hook missing"
          fi
          
          # Check PM monitor
          if [ -f "scripts/pm_monitor.py" ]; then
            echo "✅ PM Monitor found"
          else
            echo "⚠️ PM Monitor missing"
          fi
          
          # Check setup script
          if [ -f "setup_git_hooks.sh" ]; then
            echo "✅ Git hooks setup script found"
          else
            echo "⚠️ Git hooks setup script missing"
          fi
          
          echo "✅ Prevention systems validation complete"