# Automated Dependency Updates and Security Monitoring
# LeanVibe Quality Agent - Continuous Security Assurance

name: 🔒 Dependency Security Monitoring

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
    paths:
      - 'requirements.txt'
      - 'pyproject.toml'
      - '.github/workflows/dependency-security-monitoring.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'requirements.txt'
      - 'pyproject.toml'
  workflow_dispatch: # Allow manual trigger

jobs:
  dependency-security-scan:
    name: 🔍 Security Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      issues: write
      pull-requests: write
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit pip-audit

    - name: 🛡️ Run Safety dependency scan
      id: safety_scan
      run: |
        safety scan --json --output safety_report.json || true
        echo "safety_exit_code=$?" >> $GITHUB_OUTPUT

    - name: 🔒 Run Bandit security scan
      id: bandit_scan
      run: |
        bandit -r . -f json -o bandit_report.json --exclude=tests,tutorials || true
        echo "bandit_exit_code=$?" >> $GITHUB_OUTPUT

    - name: 🔍 Run pip-audit vulnerability scan
      id: pip_audit_scan
      run: |
        pip-audit --format=json --output=pip_audit_report.json || true
        echo "pip_audit_exit_code=$?" >> $GITHUB_OUTPUT

    - name: 📊 Parse scan results
      id: parse_results
      run: |
        python -c "
        import json
        import os
        
        # Parse Safety results
        try:
            with open('safety_report.json', 'r') as f:
                safety_data = json.load(f)
                safety_vulnerabilities = len(safety_data.get('vulnerabilities', []))
        except:
            safety_vulnerabilities = 0
        
        # Parse Bandit results
        try:
            with open('bandit_report.json', 'r') as f:
                bandit_data = json.load(f)
                bandit_high = len([r for r in bandit_data.get('results', []) if r.get('issue_severity') == 'HIGH'])
                bandit_medium = len([r for r in bandit_data.get('results', []) if r.get('issue_severity') == 'MEDIUM'])
        except:
            bandit_high = bandit_medium = 0
        
        # Parse pip-audit results
        try:
            with open('pip_audit_report.json', 'r') as f:
                pip_audit_data = json.load(f)
                pip_audit_vulnerabilities = len(pip_audit_data.get('vulnerabilities', []))
        except:
            pip_audit_vulnerabilities = 0
        
        # Set outputs
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f'safety_vulnerabilities={safety_vulnerabilities}\n')
            f.write(f'bandit_high={bandit_high}\n')
            f.write(f'bandit_medium={bandit_medium}\n')
            f.write(f'pip_audit_vulnerabilities={pip_audit_vulnerabilities}\n')
            
        # Determine overall status
        critical_issues = safety_vulnerabilities + bandit_high + pip_audit_vulnerabilities
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f'critical_issues={critical_issues}\n')
            f.write(f'has_critical_issues={\"true\" if critical_issues > 0 else \"false\"}\n')
        "

    - name: 📄 Upload Security Reports
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          safety_report.json
          bandit_report.json
          pip_audit_report.json
        retention-days: 30

    - name: 🚨 Create Security Issue (if vulnerabilities found)
      if: steps.parse_results.outputs.has_critical_issues == 'true'
      uses: actions/github-script@60a0d83039c74a4adc543d1de228d68b8b90b10e # v7.0.1
      with:
        script: |
          const safetyVulns = '${{ steps.parse_results.outputs.safety_vulnerabilities }}';
          const banditHigh = '${{ steps.parse_results.outputs.bandit_high }}';
          const banditMedium = '${{ steps.parse_results.outputs.bandit_medium }}';
          const pipAuditVulns = '${{ steps.parse_results.outputs.pip_audit_vulnerabilities }}';
          const criticalIssues = '${{ steps.parse_results.outputs.critical_issues }}';
          
          const issueBody = `
          ## 🚨 Security Vulnerabilities Detected
          
          **Scan Date**: ${new Date().toISOString()}
          **Branch**: ${{ github.ref_name }}
          **Commit**: ${{ github.sha }}
          
          ### 📊 Vulnerability Summary
          - **Critical Issues**: ${criticalIssues}
          - **Safety Vulnerabilities**: ${safetyVulns}
          - **Bandit High Severity**: ${banditHigh}
          - **Bandit Medium Severity**: ${banditMedium}
          - **Pip-Audit Vulnerabilities**: ${pipAuditVulns}
          
          ### 🔍 Scan Results
          Detailed reports are available in the [workflow artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).
          
          ### ⚡ Required Actions
          1. **Immediate**: Review high-severity vulnerabilities
          2. **Update**: Upgrade affected dependencies
          3. **Validate**: Run security tests after updates
          4. **Document**: Update security documentation if needed
          
          ### 🔗 Resources
          - [Safety Documentation](https://pypi.org/project/safety/)
          - [Bandit Documentation](https://bandit.readthedocs.io/)
          - [LeanVibe Security Guidelines](./docs/SECURITY.md)
          
          ---
          *🤖 Automated by LeanVibe Quality Agent*
          `;
          
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['security', 'dependencies'],
            state: 'open'
          });
          
          if (issues.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Security Vulnerabilities Detected - ${criticalIssues} Critical Issues`,
              body: issueBody,
              labels: ['security', 'dependencies', 'high-priority']
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issues[0].number,
              body: `## 🔄 Updated Security Scan Results\n\n${issueBody}`
            });
          }

    - name: ✅ Security Scan Summary
      run: |
        echo "## 🔒 Security Scan Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Safety Vulnerabilities**: ${{ steps.parse_results.outputs.safety_vulnerabilities }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Bandit High Severity**: ${{ steps.parse_results.outputs.bandit_high }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Bandit Medium Severity**: ${{ steps.parse_results.outputs.bandit_medium }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Pip-Audit Vulnerabilities**: ${{ steps.parse_results.outputs.pip_audit_vulnerabilities }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Critical Issues**: ${{ steps.parse_results.outputs.critical_issues }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.parse_results.outputs.has_critical_issues }}" == "true" ]; then
          echo "🚨 **Status**: CRITICAL ISSUES FOUND - Immediate action required" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **Status**: NO CRITICAL ISSUES - All security checks passed" >> $GITHUB_STEP_SUMMARY
        fi

  dependency-update-check:
    name: 📦 Dependency Update Check
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐍 Set up Python
      uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
      with:
        python-version: '3.13'

    - name: 📦 Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools pip-check-updates

    - name: 🔍 Check for dependency updates
      id: check_updates
      run: |
        # Create a temporary file to store update information
        echo "Available updates:" > update_info.txt
        
        # Check for outdated packages
        pip list --outdated --format=json > outdated.json || echo "[]" > outdated.json
        
        # Parse and format updates
        python -c "
        import json
        import os
        
        with open('outdated.json', 'r') as f:
            outdated = json.load(f)
        
        update_count = len(outdated)
        security_updates = []
        
        with open('update_info.txt', 'w') as f:
            if update_count > 0:
                f.write(f'Found {update_count} package updates available:\n\n')
                for pkg in outdated:
                    name = pkg.get('name', '')
                    current = pkg.get('version', '')
                    latest = pkg.get('latest_version', '')
                    f.write(f'- {name}: {current} → {latest}\n')
                    
                    # Check if this might be a security update
                    if any(keyword in name.lower() for keyword in ['security', 'crypto', 'ssl', 'auth']):
                        security_updates.append(name)
            else:
                f.write('All dependencies are up to date.\n')
        
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f'update_count={update_count}\n')
            f.write(f'has_updates={\"true\" if update_count > 0 else \"false\"}\n')
            f.write(f'security_update_count={len(security_updates)}\n')
            f.write(f'has_security_updates={\"true\" if security_updates else \"false\"}\n')
        "

    - name: 📄 Read update info
      if: steps.check_updates.outputs.has_updates == 'true'
      id: read_updates
      run: |
        UPDATE_INFO=$(cat update_info.txt)
        echo "update_info<<EOF" >> $GITHUB_OUTPUT
        echo "$UPDATE_INFO" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 🔄 Create Dependency Update Issue
      if: steps.check_updates.outputs.has_updates == 'true'
      uses: actions/github-script@60a0d83039c74a4adc543d1de228d68b8b90b10e # v7.0.1
      with:
        script: |
          const updateCount = '${{ steps.check_updates.outputs.update_count }}';
          const securityUpdateCount = '${{ steps.check_updates.outputs.security_update_count }}';
          const updateInfo = `${{ steps.read_updates.outputs.update_info }}`;
          
          const issueBody = `
          ## 📦 Dependency Updates Available
          
          **Scan Date**: ${new Date().toISOString()}
          **Total Updates**: ${updateCount}
          **Security-Related Updates**: ${securityUpdateCount}
          
          ### 📋 Available Updates
          \`\`\`
          ${updateInfo}
          \`\`\`
          
          ### 🔄 Recommended Actions
          1. **Review**: Analyze each dependency update for breaking changes
          2. **Test**: Update dependencies in a feature branch
          3. **Validate**: Run comprehensive test suite
          4. **Security**: Prioritize security-related updates
          5. **Deploy**: Merge after successful validation
          
          ### 📚 Update Commands
          \`\`\`bash
          # Update all dependencies
          pip install --upgrade -r requirements.txt
          
          # Update specific package
          pip install --upgrade package_name
          
          # Generate new requirements.txt
          pip freeze > requirements.txt
          \`\`\`
          
          ### ⚠️ Important Notes
          - Always test updates in a development environment first
          - Review changelogs for breaking changes
          - Update documentation if API changes occur
          - Run full test suite after updates
          
          ---
          *🤖 Automated by LeanVibe Quality Agent*
          `;
          
          // Check if there's already an open dependency update issue
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['dependencies', 'updates'],
            state: 'open'
          });
          
          if (issues.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📦 Dependency Updates Available - ${updateCount} packages`,
              body: issueBody,
              labels: ['dependencies', 'updates', 'maintenance']
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issues[0].number,
              body: `## 🔄 Updated Dependency Scan\n\n${issueBody}`
            });
          }

    - name: ✅ Dependency Check Summary
      run: |
        echo "## 📦 Dependency Update Check Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Updates Available**: ${{ steps.check_updates.outputs.update_count }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security-Related Updates**: ${{ steps.check_updates.outputs.security_update_count }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.check_updates.outputs.has_updates }}" == "true" ]; then
          echo "📦 **Status**: UPDATES AVAILABLE - Review and apply updates" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **Status**: ALL DEPENDENCIES UP TO DATE" >> $GITHUB_STEP_SUMMARY
        fi