#!/usr/bin/env python3
"""
GitHub Issue Template System for LeanVibe Agent Hive

Provides smart, structured templates for agent progress updates that focus
on business impact and actionable insights.
"""

from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List, Optional
from enum import Enum


class AgentStatus(Enum):
    """Agent status levels."""
    ON_TRACK = "On Track"
    AT_RISK = "At Risk"
    BLOCKED = "Blocked"
    COMPLETE = "Complete"


class RiskLevel(Enum):
    """Risk assessment levels."""
    LOW = "ðŸŸ¢ Low"
    MEDIUM = "ðŸŸ¡ Medium"
    HIGH = "ðŸ”´ High"


@dataclass
class AgentMetrics:
    """Agent performance metrics."""
    progress_percentage: int
    code_quality_improvement: str
    test_coverage: str
    documentation_coverage: str
    business_impact: str
    risk_level: RiskLevel


@dataclass
class ActionItem:
    """Represents an action item."""
    description: str
    priority: str
    assigned_to: str
    deadline: Optional[datetime] = None


class GitHubIssueTemplate:
    """Generates structured GitHub issue templates."""

    def __init__(self):
        self.templates = {
            'agent_progress': self.generate_agent_progress_update,
            'milestone_completion': self.generate_milestone_completion,
            'blocker_report': self.generate_blocker_report,
            'executive_summary': self.generate_executive_summary
        }

    def generate_agent_progress_update(self,
                                     agent_name: str,
                                     status: AgentStatus,
                                     metrics: AgentMetrics,
                                     next_milestone: str,
                                     action_items: List[ActionItem],
                                     detailed_progress: Optional[str] = None) -> str:
        """Generate a structured agent progress update."""

        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        template = f"""## ðŸ¤– Agent Progress Update - {timestamp}

### ðŸŽ¯ Executive Summary
**Agent**: {agent_name}
**Status**: {status.value}
**Progress**: {metrics.progress_percentage}% complete
**Business Impact**: {metrics.business_impact}
**Next Milestone**: {next_milestone}

### ðŸ“Š Key Metrics
- **Code Quality**: {metrics.code_quality_improvement}
- **Test Coverage**: {metrics.test_coverage}
- **Documentation**: {metrics.documentation_coverage}
- **Risk Level**: {metrics.risk_level.value}

### ðŸš¨ Action Required
"""

        if not action_items:
            template += "- [x] None - proceeding autonomously\n"
        else:
            template += "- [ ] Actions needed:\n"
            for item in action_items:
                template += f"  - [ ] {item.description} (Priority: {item.priority})\n"

        if detailed_progress:
            template += f"""
### ðŸ“ˆ Detailed Progress
<details>
<summary>Click to expand technical details</summary>

{detailed_progress}

</details>
"""

        template += f"""
### ðŸ”„ Next Steps
- **Immediate**: {self._get_immediate_next_step(status, metrics)}
- **Short-term**: {self._get_short_term_goals(metrics)}
- **ETA**: {self._calculate_eta(metrics.progress_percentage)}

---
*Generated by LeanVibe Agent Hive Orchestration System*
"""

        return template

    def generate_milestone_completion(self,
                                    agent_name: str,
                                    milestone_name: str,
                                    achievements: List[str],
                                    business_impact: str,
                                    next_phase: str) -> str:
        """Generate milestone completion template."""

        template = f"""## ðŸŽ‰ Milestone Completed: {milestone_name}

### ðŸš€ Achievement Summary
**Agent**: {agent_name}
**Milestone**: {milestone_name}
**Completion Time**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
**Business Impact**: {business_impact}

### âœ… Key Achievements
"""

        for achievement in achievements:
            template += f"- âœ… {achievement}\n"

        template += f"""
### ðŸ”„ Next Phase
**Starting**: {next_phase}
**Expected Timeline**: {self._estimate_next_phase_timeline()}

### ðŸ“Š Impact Metrics
- **Development Velocity**: Maintained high pace
- **Quality Score**: All quality gates passed
- **Risk Level**: ðŸŸ¢ Low
- **Team Efficiency**: Autonomous completion

---
**Status**: âœ… **MILESTONE COMPLETE** - Ready for next phase
"""

        return template

    def generate_blocker_report(self,
                              agent_name: str,
                              blocker_description: str,
                              impact_assessment: str,
                              suggested_solutions: List[str],
                              escalation_level: str) -> str:
        """Generate blocker report template."""

        template = f"""## ðŸš¨ Agent Blocker Report

### ðŸ”´ Blocker Summary
**Agent**: {agent_name}
**Blocker**: {blocker_description}
**Impact**: {impact_assessment}
**Escalation Level**: {escalation_level}
**Reported**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

### ðŸ’¡ Suggested Solutions
"""

        for solution in suggested_solutions:
            template += f"- {solution}\n"

        template += f"""
### ðŸŽ¯ Human Action Required
- [ ] **Immediate**: Review blocker and provide guidance
- [ ] **Assign**: Technical expert if needed
- [ ] **Timeline**: Provide resolution timeline
- [ ] **Escalate**: If resolution > 2 hours

### ðŸ“Š Impact Analysis
- **Progress Impact**: Work halted on current milestone
- **Timeline Risk**: {self._assess_timeline_risk()}
- **Resource Needs**: Technical expert consultation
- **Alternative Tasks**: None available

---
**Priority**: ðŸš¨ **HIGH** - Immediate attention required
"""

        return template

    def generate_executive_summary(self,
                                 agents_data: List[Dict],
                                 overall_progress: int,
                                 key_achievements: List[str],
                                 business_impact: Dict[str, str],
                                 strategic_recommendations: List[str]) -> str:
        """Generate executive summary template."""

        template = f"""## ðŸ“Š Executive Summary - Agent Hive Status

### ðŸŽ¯ Overall Status
**Overall Progress**: {overall_progress}% complete
**Active Agents**: {len(agents_data)}
**Report Date**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

### ðŸš€ Key Achievements This Week
"""

        for achievement in key_achievements:
            template += f"- âœ… {achievement}\n"

        template += """
### ðŸ“ˆ Business Impact
"""

        for metric, value in business_impact.items():
            template += f"- **{metric}**: {value}\n"

        template += """
### ðŸ‘¥ Agent Status Overview
"""

        for agent in agents_data:
            progress_bar = self._create_text_progress_bar(agent.get('progress', 0))
            template += f"- **{agent['name']}**: {progress_bar} {agent.get('progress', 0)}% ({agent.get('status', 'Unknown')})\n"

        template += """
### ðŸŽ¯ Strategic Recommendations
"""

        for recommendation in strategic_recommendations:
            template += f"- {recommendation}\n"

        template += f"""
### ðŸ”„ Next Week Focus
- **Priority 1**: {self._get_next_week_priority(agents_data)}
- **Resource Allocation**: {self._get_resource_recommendations(agents_data)}
- **Risk Mitigation**: {self._get_risk_mitigation_plan(agents_data)}

---
**Overall Health**: ðŸŸ¢ **EXCELLENT** - All agents performing well
"""

        return template

    def _get_immediate_next_step(self, status: AgentStatus, metrics: AgentMetrics) -> str:
        """Get immediate next step based on status."""
        if status == AgentStatus.BLOCKED:
            return "Resolve current blocker"
        elif status == AgentStatus.COMPLETE:
            return "Create pull request for review"
        elif metrics.progress_percentage > 80:
            return "Focus on completion and quality validation"
        else:
            return "Continue current development phase"

    def _get_short_term_goals(self, metrics: AgentMetrics) -> str:
        """Get short-term goals based on metrics."""
        if metrics.progress_percentage > 90:
            return "Prepare for production deployment"
        elif metrics.progress_percentage > 70:
            return "Complete current milestone and prepare for review"
        else:
            return "Maintain development velocity and quality standards"

    def _calculate_eta(self, progress: int) -> str:
        """Calculate estimated time to completion."""
        if progress >= 100:
            return "Complete"

        remaining = 100 - progress
        estimated_hours = remaining * 0.5  # Simple linear estimation

        if estimated_hours < 2:
            return f"{estimated_hours:.1f} hours"
        elif estimated_hours < 24:
            return f"{estimated_hours:.0f} hours"
        else:
            return f"{estimated_hours/24:.1f} days"

    def _estimate_next_phase_timeline(self) -> str:
        """Estimate timeline for next phase."""
        return "2-3 days based on current velocity"

    def _assess_timeline_risk(self) -> str:
        """Assess timeline risk due to blocker."""
        return "Medium - may impact sprint deadline if not resolved within 4 hours"

    def _create_text_progress_bar(self, progress: int, width: int = 20) -> str:
        """Create text-based progress bar."""
        filled = int(progress * width / 100)
        bar = "â–ˆ" * filled + "â–‘" * (width - filled)
        return f"[{bar}]"

    def _get_next_week_priority(self, agents_data: List[Dict]) -> str:
        """Get next week's priority based on agent status."""
        complete_agents = [agent for agent in agents_data if agent.get('progress', 0) >= 100]
        if complete_agents:
            return "PR reviews and production deployment"
        else:
            return "Complete current milestones and maintain quality"

    def _get_resource_recommendations(self, agents_data: List[Dict]) -> str:
        """Get resource allocation recommendations."""
        total_agents = len(agents_data)
        if total_agents >= 2:
            return "Consider scaling to 4-5 agents for next sprint"
        else:
            return "Current resource allocation optimal"

    def _get_risk_mitigation_plan(self, agents_data: List[Dict]) -> str:
        """Get risk mitigation plan."""
        blocked_agents = [agent for agent in agents_data if 'blocked' in agent.get('status', '').lower()]
        if blocked_agents:
            return "Focus on unblocking agents and preventing similar issues"
        else:
            return "Maintain current quality gates and monitoring"


# Example usage
def main():
    """Example usage of GitHub issue templates."""
    template_generator = GitHubIssueTemplate()

    # Example metrics
    metrics = AgentMetrics(
        progress_percentage=85,
        code_quality_improvement="65% improvement in maintainability",
        test_coverage="91% (stable)",
        documentation_coverage="80% (major improvement)",
        business_impact="4x development velocity improvement",
        risk_level=RiskLevel.LOW
    )

    # Generate progress update
    progress_update = template_generator.generate_agent_progress_update(
        agent_name="Documentation Agent",
        status=AgentStatus.ON_TRACK,
        metrics=metrics,
        next_milestone="API documentation completion",
        action_items=[],
        detailed_progress="Phase 2 of 4 complete with enhanced tutorial system"
    )

    print("ðŸ“‹ Agent Progress Update Template:")
    print(progress_update)

    # Generate milestone completion
    milestone_completion = template_generator.generate_milestone_completion(
        agent_name="Tech Debt Agent",
        milestone_name="Type Safety Implementation",
        achievements=[
            "Fixed 58 MyPy errors across ML modules",
            "Achieved 100% type safety for production code",
            "Reduced deployment risk by 70%"
        ],
        business_impact="Production readiness significantly improved",
        next_phase="Performance optimization and security audit"
    )

    print("\nðŸŽ‰ Milestone Completion Template:")
    print(milestone_completion)


if __name__ == "__main__":
    main()
