#!/usr/bin/env python3
"""
/sleep command - Manual memory consolidation trigger
Consolidates current context into persistent memory
"""

import asyncio
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))

from scripts.context_memory_manager import ContextMemoryManager


async def main():
    # Parse command arguments
    level = "critical"  # Default level for manual triggers
    if len(sys.argv) > 1:
        arg_level = sys.argv[1].lower()
        if arg_level in ["normal", "critical", "emergency"]:
            level = arg_level
    
    print(f"🧠 Initiating manual memory consolidation (level: {level})")
    
    # Initialize memory manager
    manager = ContextMemoryManager()
    
    # Check current context usage
    usage = manager.get_context_usage()
    needs_action, threshold_level = manager.check_context_threshold()
    
    print(f"📊 Context Usage: {usage:.1f}%" if usage else "📊 Context Usage: Unknown")
    print(f"🎯 Threshold Status: {threshold_level}")
    
    # Perform consolidation
    success = await manager.consolidate_memory(level)
    
    if success:
        print(f"✅ Memory consolidation completed (level: {level})")
        print("🎯 Memory preserved for wake protocol")
        print("💡 Use '/wake' to restore after context reset")
        
        # Show what was preserved
        print("\n📁 Files updated:")
        print("   - .claude/memory/ESSENTIAL_WORKFLOW_KNOWLEDGE.md (critical tools)")
        print("   - .claude/memory/LATEST_MEMORY_SNAPSHOT.json (complete state)")
        if level in ["critical", "emergency"]:
            print("   - .claude/memory/DEEP_CONSOLIDATION_*.md (comprehensive backup)")
        print("   - .claude/memory_backup/ (redundant copies)")
        
    else:
        print(f"❌ Memory consolidation failed")
        print("🔧 Check logs for details or try again")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())