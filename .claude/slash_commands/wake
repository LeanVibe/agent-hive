#!/usr/bin/env python3
"""
/wake command - Memory restoration after context reset
Restores essential knowledge and project state from persistent memory
"""

import asyncio
import json
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))

from scripts.context_memory_manager import ContextMemoryManager

async def main():
    print("üåÖ Initiating wake protocol - restoring memory")
    
    # Initialize memory manager
    manager = ContextMemoryManager()
    
    # Perform wake restoration
    wake_summary = await manager.wake_from_memory()
    
    # Display results
    print("\nüéØ Wake Protocol Results:")
    for key, value in wake_summary.items():
        if key == "essential_knowledge_summary":
            continue  # Too long for display
        elif key == "recommendations":
            print(f"  {key}:")
            for rec in value:
                print(f"    - {rec}")
        elif key == "wake_instructions":
            print(f"  {key}:")
            for instruction in value:
                print(f"    - {instruction}")
        else:
            print(f"  {key}: {value}")
    
    # Show critical tools immediately available
    if wake_summary.get("essential_knowledge_restored"):
        print("\nüí° Critical tools immediately available:")
        print("   - scripts/fixed_agent_communication.py (agent messaging)")
        print("   - Quality gates: commit + push mandatory")
        print("   - Evidence-based validation required")
        print("   - Current project status and priorities")
    
    # Show memory file status
    essential_file = Path(".claude/memory/ESSENTIAL_WORKFLOW_KNOWLEDGE.md")
    snapshot_file = Path(".claude/memory/LATEST_MEMORY_SNAPSHOT.json")
    
    print("\nüìÅ Memory files status:")
    print(f"   - Essential knowledge: {'‚úÖ Available' if essential_file.exists() else '‚ùå Missing'}")
    print(f"   - Memory snapshot: {'‚úÖ Available' if snapshot_file.exists() else '‚ùå Missing'}")
    
    # Show time since last consolidation
    if wake_summary.get("last_consolidation"):
        print(f"   - Last consolidation: {wake_summary['last_consolidation']}")
        print(f"   - Consolidation level: {wake_summary.get('consolidation_level', 'unknown')}")
    
    # Next steps recommendation
    print("\nüöÄ Ready to resume work!")
    print("   1. Review essential workflow knowledge (already loaded)")
    print("   2. Check agent status: python scripts/check_agent_status.py")
    print("   3. Verify current work: git status && gh pr list")
    print("   4. Resume coordination using proper communication scripts")
    
    if "error" in wake_summary:
        print(f"\n‚ö†Ô∏è Warning: {wake_summary['error']}")
        print("Some memory restoration may be incomplete")

if __name__ == "__main__":
    asyncio.run(main())