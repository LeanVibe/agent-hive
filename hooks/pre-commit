#!/bin/bash
#
# LeanVibe Agent Hive - Pre-commit Quality Gate
#
# This hook runs before each commit to ensure code quality and prevent
# broken commits from being added to the repository.
#

set -e

echo "üîç LeanVibe Pre-commit Quality Gate"
echo "=================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if we're in the right directory
GIT_ROOT=$(git rev-parse --show-toplevel)
if [ ! -f "$GIT_ROOT/scripts/cli.py" ] || [ ! -d "$GIT_ROOT/advanced_orchestration" ]; then
    echo -e "${RED}‚ùå Error: Not in LeanVibe Agent Hive project root${NC}"
    echo "üí° Run git commit from the project root directory"
    exit 1
fi

# Function to print status
print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
        return 1
    fi
}

# Function to print step
print_step() {
    echo -e "${YELLOW}üîÑ $1...${NC}"
}

echo "üìã Running quality checks on staged files..."
echo ""

# 1. Check Python syntax
print_step "Checking Python syntax"
python_files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)
if [ -n "$python_files" ]; then
    python -m py_compile $python_files
    print_status $? "Python syntax check"
else
    print_status 0 "Python syntax check (no Python files changed)"
fi

# 2. Test import paths for CLI
print_step "Validating CLI import paths"
if python -c "from advanced_orchestration import MultiAgentCoordinator; print('Import validation passed')" >/dev/null 2>&1; then
    print_status 0 "CLI import validation"
else
    print_status 1 "CLI import validation"
    echo "üí° Check that advanced_orchestration module imports are working"
    exit 1
fi

# 3. Test CLI basic functionality
print_step "Testing CLI basic functionality"
if python "$GIT_ROOT/scripts/cli.py" --help >/dev/null 2>&1; then
    print_status 0 "CLI help system"
else
    print_status 1 "CLI help system" 
    echo "üí° CLI help command failed - check cli.py for errors"
    exit 1
fi

# 4. Run core tests if they exist and any Python files changed
if [ -n "$python_files" ] && [ -d "tests" ]; then
    print_step "Running core tests"
    if python -m pytest tests/test_multi_agent_coordinator.py -v --tb=short >/dev/null 2>&1; then
        print_status 0 "Core tests"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Core tests failed or not available${NC}"
        echo "üí° Ensure tests pass before committing"
    fi
else
    print_status 0 "Core tests (skipped - no Python changes or tests directory)"
fi

# 5. Check for basic quality issues
print_step "Checking for common issues"

# Check for debug prints or TODO markers in Python files
if [ -n "$python_files" ]; then
    debug_prints=$(echo "$python_files" | xargs grep -n "print(" 2>/dev/null | grep -v "# OK" || true)
    if [ -n "$debug_prints" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Debug prints found (consider removing):${NC}"
        echo "$debug_prints"
    fi
    
    todos=$(echo "$python_files" | xargs grep -n "TODO\|FIXME\|XXX" 2>/dev/null || true)
    if [ -n "$todos" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  TODO markers found:${NC}"
        echo "$todos"
    fi
fi

print_status 0 "Code quality checks"

# 6. üö® NEW: Critical Documentation Validation
print_step "Validating critical documentation sync"

# Check if any code changes require documentation updates
python_changes=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)
feature_changes=$(git diff --cached --name-only --diff-filter=ACM | grep -E '(cli\.py|advanced_orchestration|external_api|ml_enhancements)' || true)

if [ -n "$feature_changes" ]; then
    echo "üîç Code changes detected in core features, validating documentation..."
    
    # Check critical documentation files exist and are reasonably current
    critical_docs=("docs/PLAN.md" "README.md" "API_REFERENCE.md")
    
    for doc in "${critical_docs[@]}"; do
        if [ ! -f "$doc" ]; then
            print_status 1 "Critical documentation validation"
            echo "üí° Required documentation file missing: $doc"
            echo "üîß Create the file or update your feature to include documentation"
            exit 1
        fi
        
        # Check if documentation is extremely outdated (more than 30 days)
        if [ $(find "$doc" -mtime +30 | wc -l) -gt 0 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Warning: $doc is more than 30 days old${NC}"
            echo "üí° Consider updating documentation to reflect current system state"
        fi
    done
    
    # Validate that PLAN.md reflects current phase
    if ! grep -q "Documentation & Tutorial Implementation" docs/PLAN.md; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: docs/PLAN.md may not reflect current project phase${NC}"
        echo "üí° Ensure PLAN.md shows current Documentation & Tutorial Implementation phase"
    fi
    
    # Validate that README.md has current test count
    if ! grep -q "409" README.md; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: README.md may not show current test count (409)${NC}"
        echo "üí° Update test count in README.md to match actual system"
    fi
    
    print_status 0 "Critical documentation validation"
else
    print_status 0 "Critical documentation validation (no feature changes)"
fi

# 7. Validate that required files exist
print_step "Validating project structure"
required_files=("scripts/cli.py" "advanced_orchestration/__init__.py" "requirements.txt")
for file in "${required_files[@]}"; do
    if [ ! -f "$GIT_ROOT/$file" ]; then
        print_status 1 "Project structure validation"
        echo "üí° Required file missing: $file"
        exit 1
    fi
done
print_status 0 "Project structure validation"

echo ""
echo -e "${GREEN}üéâ All quality checks passed!${NC}"
echo "‚úÖ Commit is ready to proceed"
echo ""

exit 0